{"version":3,"sources":["components/Card/Cards.js","api.js","components/CountryPicker/CountryPicker.js","components/Chart/Chart.js","App.js","serviceWorker.js","index.js","coronavirus.jpg"],"names":["Cards","data","confirmed","recovered","deaths","lastUpdate","className","Grid","container","spacing","justify","item","component","Card","xs","md","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","console","log","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","CountryPicker","handleCountryChange","useState","fetchedCountries","setFetchedCountries","useEffect","fetchAPI","FormControl","NativeSelect","defaultValue","onChange","e","target","i","key","Chart","setDailyData","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","lagend","display","title","text","App","state","fetchedData","setState","this","src","image","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.afc6b57a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Cards.css';\r\nimport CountUp from 'react-countup';\r\nimport {Card, CardContent, Typography, Grid } from '@material-ui/core'\r\n\r\n\r\n\r\n\r\nfunction Cards({data: {confirmed, recovered, deaths, lastUpdate}}) {\r\n    if(!confirmed){\r\n        return 'Loading....';\r\n    }\r\n\r\n\r\n    return (\r\n      <div className=\"container1\">\r\n        <Grid container spacing={3} justify=\"center\">\r\n          <Grid item component={Card} xs={12} md={3} className=\"card infected\">\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>\r\n                Infected\r\n              </Typography>\r\n              <Typography variant=\"h5\" gutterBottom>\r\n                <CountUp\r\n                  start={0}\r\n                  end={confirmed.value}\r\n                  duration={3}\r\n                  separator=\",\"\r\n                />\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">\r\n                {new Date(lastUpdate).toDateString()}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                Number of active cases of Covide-19\r\n              </Typography>\r\n            </CardContent>\r\n          </Grid>\r\n\r\n          <Grid item component={Card} xs={12} md={3} className=\"card recovered\">\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>\r\n                Recovered\r\n              </Typography>\r\n              <Typography variant=\"h5\" gutterBottom>\r\n                <CountUp\r\n                  start={0}\r\n                  end={recovered.value}\r\n                  duration={3}\r\n                  separator=\",\"\r\n                />\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">\r\n                {new Date(lastUpdate).toDateString()}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                Number of recovered of Covide-19\r\n              </Typography>\r\n            </CardContent>\r\n          </Grid>\r\n\r\n          <Grid item component={Card} xs={12} md={3} className=\"card deaths\">\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>\r\n                Deaths\r\n              </Typography>\r\n              <Typography variant=\"h5\" gutterBottom>\r\n                <CountUp\r\n                  start={0}\r\n                  end={deaths.value}\r\n                  duration={3}\r\n                  separator=\",\"\r\n                />\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">\r\n                {new Date(lastUpdate).toDateString()}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                Number of deaths from Covide-19\r\n              </Typography>\r\n            </CardContent>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Cards;\r\n","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async(country) =>{\r\n\r\n    let changeableUrl = url;\r\n    if(country){\r\n        changeableUrl = `${url}/countries/${country}`;\r\n    }\r\n\r\ntry {\r\n    const {data: {confirmed, recovered, deaths, lastUpdate}} = await axios.get(changeableUrl);\r\n    \r\n    const modifiedData = {\r\n        confirmed,\r\n        recovered,\r\n        deaths,\r\n        lastUpdate\r\n    }\r\n    \r\n    return  modifiedData;\r\n\r\n} catch (error) {\r\n    console.log(error)\r\n}\r\n}\r\n\r\n\r\nexport const fetchDailyData = async() =>{\r\n    try {\r\n        const {data} = await axios.get(`${url}/daily`);\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate\r\n        }));\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async() =>{\r\n    try {\r\n        const {data: {countries}} = await axios.get(`${url}/countries`);\r\n        \r\n        return countries.map((country) => country.name);\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}","import React, {useState, useEffect} from 'react';\r\nimport './CountryPicker.css';\r\nimport { NativeSelect, FormControl } from '@material-ui/core'\r\nimport { fetchCountries} from '../../api';\r\n\r\n\r\n\r\nfunction CountryPicker({handleCountryChange}) {\r\n\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchAPI();\r\n    }, [setFetchedCountries]);\r\n\r\n    const fetchAPI = async() =>{\r\n        setFetchedCountries(await fetchCountries());\r\n    };\r\n\r\n\r\n    return (\r\n        <FormControl className=\"formControl\">\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)} >\r\n                <option value=''>Global</option>\r\n                {fetchedCountries.map((country, i) => <option key={i} value={country} >{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;\r\n","import React, {useState, useEffect} from 'react';\r\nimport './Chart.css';\r\nimport {fetchDailyData} from '../../api';\r\nimport {Line, Bar} from 'react-chartjs-2';\r\n\r\n\r\nfunction Chart({data:{confirmed, recovered, deaths}, country}) {\r\n\r\n    const [dailyData, setDailyData] = useState({});\r\n\r\n    const fetchAPI = async()=>{\r\n        setDailyData(await fetchDailyData());\r\n        \r\n    }\r\n\r\n    useEffect(() =>{\r\n        fetchAPI();\r\n    }, []);\r\n\r\n    const lineChart = (\r\n    dailyData.length \r\n        ? (\r\n            <Line\r\n            data={{\r\n             labels: dailyData.map(({date}) => date),\r\n             datasets: [{\r\n                 data: dailyData.map(({confirmed}) => confirmed),\r\n                 label: 'Infected',\r\n                 borderColor: '#3333ff',\r\n                 fill: true\r\n             },{\r\n                 data: dailyData.map(({deaths}) => deaths),\r\n                 label: 'Deaths',\r\n                 borderColor: 'red',\r\n                 backgroundColor: 'rgba(255,0,0,0.5)',\r\n                 fill: true\r\n             }],\r\n         }}\r\n        />\r\n        ) : null\r\n    );\r\n\r\n    const barChart = (\r\n        confirmed ?\r\n        (\r\n            <Bar\r\n                data={{\r\n                    labels: ['Infected', 'Recovered', 'Deaths'],\r\n                    datasets:[{\r\n                        label: 'People',\r\n                        backgroundColor: [\r\n                            'rgba(0, 0, 255, 0.5)',\r\n                            'rgba(0, 255, 0, 0.5)',\r\n                            'rgba(255, 0, 0, 0.5)',\r\n                        ],\r\n                        data: [confirmed.value, recovered.value, deaths.value]\r\n                    }]\r\n                }}\r\n                options={{\r\n                    lagend: {display: false},\r\n                    title: {display: true, text: `Curren state in ${country}`},\r\n                }}\r\n            />\r\n        ) : null\r\n    )\r\n\r\n    return (\r\n        <div className=\"container2\">\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport image from './coronavirus.jpg';\nimport Cards from './components/Card/Cards';\nimport CountryPicker from './components/CountryPicker/CountryPicker';\nimport Chart from './components/Chart/Chart';\nimport {fetchData} from './api';\n\nclass App extends Component {\n\n  state={\n    data:{},\n    country: '',\n  }\n\n  async componentDidMount(){\n    const fetchedData = await fetchData();\n\n    this.setState({data: fetchedData});\n  }\n\n  handleCountryChange = async(country) =>{\n    const fetchedData = await fetchData(country);\n    this.setState({data: fetchedData, country: country});\n  }\n\n  render(){\n    const {data, country} = this.state;\n    return(\n      <div className=\"container\">\n        <img className='banner' src={image} alt=\"Covide-19\"/>\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Chart data={data} country={country} />\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/coronavirus.c45cf0e9.jpg\";"],"sourceRoot":""}